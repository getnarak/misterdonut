/**
 * ===========================================
 * ‡πÄ‡∏ß‡πá‡∏ö‡∏á‡∏µ‡πâ‡∏≠‡πÅ‡∏ü‡∏ô - JavaScript Functions üíñ
 * ===========================================
 */

// Global Variables
let globalStats = {
  visits: 0,
  yesCount: 0,
  noCount: 0
};

let currentImageIndex = 0;

// Image paths (update these to match your actual image files)
const images = [
  "images/1.jpg",  // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
  "images/2.jpg",  // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
  "images/3.jpg"   // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
];

// Apology messages
const apologyMessages = [
  "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞‡∏Ñ‡∏∞ üíñ ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏¢‡∏¥‡πâ‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
  "‡πÄ‡∏£‡∏≤‡∏ú‡∏¥‡∏î‡πÄ‡∏≠‡∏á üò¢ ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡∏†‡∏±‡∏¢‡∏´‡∏ô‡πà‡∏≠‡∏¢",
  "‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏•‡∏¢ üíï ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏á‡∏≠‡∏ô‡∏Å‡∏±‡∏ô",
  "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à ü•∫",
  "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏µ‡∏Å üíî",
  "‡∏Ç‡∏≠‡πÅ‡∏Ñ‡πà‡∏¢‡∏¥‡πâ‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞ üòä",
  "‡πÄ‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏ô‡∏∞ üò≠",
  "‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå üíù",
  "‡∏ú‡∏¥‡∏î‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ó‡∏µ üôè",
  "‡∏£‡∏±‡∏Å‡πÄ‡∏ò‡∏≠‡∏ô‡∏∞ ‡∏≠‡∏¢‡πà‡∏≤‡πÇ‡∏Å‡∏£‡∏ò‡∏ô‡∏≤‡∏ô‡πÜ üíó"
];

/**
 * Load initial statistics and setup
 */
function loadStats() {
  // Load from localStorage if available
  const savedStats = localStorage.getItem('apologyStats');
  if (savedStats) {
    globalStats = JSON.parse(savedStats);
  }
  
  // Increment visit count
  globalStats.visits++;
  saveStats();
  updateStatsDisplay();
  
  // Show main content after loading
  setTimeout(() => {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('mainContent').style.display = 'block';
    
    // Start animations and show first message
    startAnimations();
    setTimeout(showApology, 500);
  }, 1000);
}

/**
 * Save statistics to localStorage
 */
function saveStats() {
  try {
    localStorage.setItem('apologyStats', JSON.stringify(globalStats));
  } catch (e) {
    console.warn('Cannot save to localStorage:', e);
  }
}

/**
 * Update statistics display
 */
function updateStatsDisplay() {
  document.getElementById('visitCount').textContent = globalStats.visits;
  document.getElementById('yesCount').textContent = globalStats.yesCount;
  document.getElementById('noCount').textContent = globalStats.noCount;
}

/**
 * Create floating heart animation
 */
function createHeart() {
  const heart = document.createElement("div");
  heart.className = "heart";
  
  // Random heart emoji
  const hearts = ["üíñ", "üíï", "üíù", "üíó", "üíò", "‚ù§Ô∏è", "üíô", "üíú"];
  heart.textContent = hearts[Math.floor(Math.random() * hearts.length)];
  
  // Random horizontal position
  heart.style.left = Math.random() * 90 + 5 + "%";
  heart.style.bottom = "0px";
  
  document.body.appendChild(heart);
  
  // Remove heart after animation
  setTimeout(() => {
    if (heart.parentNode) {
      heart.remove();
    }
  }, 5000);
}

/**
 * Create sparkle animation
 */
function createSparkle() {
  const sparkle = document.createElement("div");
  sparkle.className = "sparkle";
  sparkle.style.left = Math.random() * 100 + "%";
  sparkle.style.top = Math.random() * 100 + "%";
  
  document.body.appendChild(sparkle);
  
  // Remove sparkle after animation
  setTimeout(() => {
    if (sparkle.parentNode) {
      sparkle.remove();
    }
  }, 3000);
}

/**
 * Start all animations
 */
function startAnimations() {
  // Create sparkles periodically
  setInterval(createSparkle, 400);
  
  // Create occasional hearts
  setInterval(createHeart, 2000);
  
  // Set first image
  document.getElementById('cuteImg').src = images[0];
  
  // Add click handler to image
  document.getElementById('cuteImg').onclick = function() {
    // Create hearts when image is clicked
    for (let i = 0; i < 5; i++) {
      setTimeout(createHeart, i * 200);
    }
    nextImage();
  };
}

/**
 * Switch to next image
 */
function nextImage() {
  currentImageIndex = (currentImageIndex + 1) % images.length;
  document.getElementById('cuteImg').src = images[currentImageIndex];
}

/**
 * Get random apology message
 */
function getRandomMessage() {
  return apologyMessages[Math.floor(Math.random() * apologyMessages.length)];
}

/**
 * Show apology message popup
 */
function showApology() {
  Swal.fire({
    title: "‡∏á‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏à üíñ",
    text: getRandomMessage(),
    icon: "info",
    confirmButtonText: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏†‡∏±‡∏¢ üò¢",
    allowOutsideClick: false,
    backdrop: 'rgba(255,182,193,0.8)',
    customClass: {
      popup: 'swal-thai'
    }
  }).then(result => {
    if (!result.isConfirmed) {
      nextImage();
      setTimeout(showApology, 300);
    }
  });
}

/**
 * Handle forgiveness button click
 */
function forgive() {
  // Update statistics
  globalStats.yesCount++;
  saveStats();
  updateStatsDisplay();

  // Show success message
  Swal.fire({
    title: "‡πÄ‡∏¢‡πâ! ü•∞",
    text: "‡πÄ‡∏Ñ‡πâ‡∏≤‡∏£‡∏±‡∏Å‡πÄ‡∏ò‡∏≠‡∏ô‡∏∞‡∏Ñ‡∏∞ üíñ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏î‡∏µ",
    icon: "success",
    confirmButtonText: "‡∏£‡∏±‡∏Å‡πÄ‡∏ò‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô üíï",
    backdrop: 'rgba(144,238,144,0.8)',
    customClass: {
      popup: 'swal-thai'
    }
  });

  // Create lots of hearts
  for (let i = 0; i < 25; i++) {
    setTimeout(createHeart, i * 100);
  }
  
  nextImage();
}

/**
 * Handle still angry button click
 */
function stillAngry() {
  // Update statistics
  globalStats.noCount++;
  saveStats();
  updateStatsDisplay();
  
  nextImage();

  // Show warning message
  Swal.fire({
    title: "‡∏¢‡∏±‡∏á‡∏á‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà üò¢",
    text: getRandomMessage(),
    icon: "warning",
    confirmButtonText: "‡πÇ‡∏≠‡πÄ‡∏Ñ ‡∏á‡∏≠‡∏ô‡∏ï‡πà‡∏≠ üò§",
    backdrop: 'rgba(255,160,122,0.8)',
    customClass: {
      popup: 'swal-thai'
    }
  });

  // Create fewer hearts
  for (let i = 0; i < 10; i++) {
    setTimeout(createHeart, i * 300);
  }
}

/**
 * Utility function to show current statistics (for debugging)
 */
function showStats() {
  console.log("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:", globalStats);
  alert(`üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö: ${globalStats.visits} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‡πÉ‡∏´‡πâ‡∏≠‡∏†‡∏±‡∏¢: ${globalStats.yesCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á  
‡∏¢‡∏±‡∏á‡∏á‡∏≠‡∏ô: ${globalStats.noCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
}

/**
 * Utility function to reset statistics (for debugging)
 */
function resetStats() {
  if (confirm("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
    globalStats = { visits: 0, yesCount: 0, noCount: 0 };
    saveStats();
    updateStatsDisplay();
    console.log("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß");
    alert("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
  }
}

/**
 * Initialize the application when DOM is loaded
 */
document.addEventListener('DOMContentLoaded', function() {
  console.log("üíñ ‡πÄ‡∏ß‡πá‡∏ö‡∏á‡∏µ‡πâ‡∏≠‡πÅ‡∏ü‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...");
});

/**
 * Initialize the application when window is loaded
 */
window.onload = function() {
  loadStats();
  console.log("‚ú® ‡πÄ‡∏ß‡πá‡∏ö‡∏á‡∏µ‡πâ‡∏≠‡πÅ‡∏ü‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!");
  console.log("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏û‡∏¥‡∏°‡∏û‡πå showStats() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠ resetStats() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï");
};